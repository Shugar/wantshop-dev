doctype html
html
  head
    title Matterlist | Try Story of Matterlist
    include partials/head-shared

  body.article-page
    header.article-head
      include partials/nav
      .container
        h1.article-title
          | The Story of Matterlist

    section.article-content
      .container
        p.article-italic
          | TL;DR: Vlad, the founder, can't live without a proper todo app. Adopts Astrid (way back in 2012). Yahoo buys and closes Astrid. Sad. Vlad switches to Wunderlist. It sort of works for him, but he hates it because it drives him mad. Tries to switch to other apps - same thing. Decides to create a Wunderlist replacement. Writes a huge spec (~300 pages!), hires a team, funds it from his own pocket, and, after 3 years of work, creates Matterlist, which, for him, works really great. Now he wants to find out if it works for other people too, so please try the app!
        p
          | Hi, I’m Vladimir Golovin, the founder of Matterlist. Some of you may also know me as the founder of <a href='https://www.filterforge.com/'>Filter Forge</a>. My life would crumble without a good todo app, and this is why I spent 3 years of my life building Matterlist.
        h2 Astrid and the Switch to Wunderlist
        p
          | I was an <a href='https://en.wikipedia.org/wiki/Astrid_(application)'>Astrid</a> user back in 2012. It was my first experience with a mobile todo list app, and this is where I realized that a todo list in my pocket is absolutely essential to my productivity. David Allen, the author of Getting Things Done, was right — you need a ‘capture device’ on you at all times, and a smartphone app is perfect for that.
          br
          br
          | Then suddenly, in 2013 Yahoo buys Astrid and shuts it down. I had several hundreds of tasks in Astrid, so I had to scramble and look for another todo list app to switch to.
          br
          br
          | After a frantic search, I settled on Wunderlist. Their import from Astrid worked well enough, so I reluctantly decided to stay until a better replacement comes along. Unfortunately, it never did.
        h2 Problems with Wunderlist
        p
          | I’ve been using Wunderlist as a daily driver since 2013, but every day, bit by bit, it drove me mad.
          br
          br
          | Why can’t I hide the tasks that are irrelevant to the present moment? Why am I forced to litter my list with unnecessary annoying due dates when I want to postpone my tasks, the majority of which are dateless by nature? Why can’t I just jump directly to a day to see what tasks I have for it, or to add a task for that day? Why do I have to walk on eggshells around recurring tasks, worrying about messing up their future recurrences by accidentally editing or deleting them? And finally, why, in the era of responsive UI design, do I have to shorten my todos in order to fit them into Wunderlist’s single-line todo items?
          br
          br
          | I did try to switch to other apps. The first obvious choice was, of course, Todoist. It’s a very mature, well-designed, polished app, with tons of features and a great team behind it, but alas -- Todoist didn’t work for me at all. Under all the polish, I found that it had the same shortcomings that so frustrated me in Wunderlist. I tried other apps as well, but none satisfied my needs. I even tried to go back to an open-source Astrid clone, but I found that I outgrew the Astrid paradigm — it wasn’t enough for me anymore.
          br
          br
          | I had to do something. I started sketching The One True App to Rule Them All.
        h2 The Opportunity
        p
          | One day, in the summer of 2015, I was attending a local coding meetup, and met Viktor Petrenko, the developer who did important work for Filter Forge but later went on to work for another company to explore full-stack web development. As we were eating our lunch, I learned that he and the friend he was with founded a software development company that offers development services — and that they are currently available.
          br
          br
          | Then it clicked. I knew I must start my perfect todo app right now, or I’ll never do it.
          br
          br
          | I knew Viktor as very competent and trustworthy. He did great at Filter Forge, and I completely trusted that he and the team under his guidance will do the perfect job.
          br
          br
          | I hired the guys on the spot, right in the middle of our lunch.
        h2 The Foundational Ideas
        p
          | Every founder is pissed off at something. I was pissed off at the distracting irrelevant stuff in my todo list that was draining my attention. Right from the start, I designed Matterlist around the idea of relevance to the present moment, to right now.
          br
          br
          | I’m easily distracted, and I’m even beginning to suspect that I have a slight ADHD streak inherited from my mother. Unless I’m deep in ‘the zone’, I have to make conscious effort in order to stay concentrated on the task at hand and avoid being distracted. My attention is my primary resource, so conserving it directing it is my highest priority. I wanted the design of Matterlist to reflect that.
        ul.article-list
          li
            span.article-bold I only want to see tasks that I can do right now.
            | Any tasks that are irrelevant to the present moment should be hidden from my Today / Now list. For example, I don’t want ‘Vacuum the floor’ on my list when I’m not at home.
          li
            span.article-bold Therefore, I need tools for quickly de-cluttering my list back to relevance.
            | If a task belongs to another day, I need to be able to quickly move it there. If a task requires a different context, for example At Work, I need it to show up in my list automatically when I’m at work. If a task is a subtask of a higher-level project I’m not working on at the moment, I want to collapse the project to hide all subtasks so that it doesn’t drain my attention with unnecessary details.
          li
            span.article-bold I need forward visibility into the future.
            | All future days must be addressable: I need to be able to jump directly to any date to see what tasks I have for that day — including recurring tasks.
          li
            span.article-bold I need subtasks to help me break down complex tasks.
            | And subtasks must be first-class: they should have all the attributes of a regular task. Subtasks can have their own subtasks, can be snoozed or moved to another day, and can be assigned a context in order to automatically show up in my list at the right moment.
          li
            span.article-bold Recurring tasks must be painless.
            | I never want to worry about messing up future recurrences of a recurring task by deleting, snoozing or editing it. The recurrences must behave just like regular tasks, and support the same actions. Which means that they, just like regular tasks, must be visible on the timeline when I select a future day.
          li
            span.article-bold I’m never forced to assign due dates.
            | Due dates must be reserved for tasks with hard deadlines. They must not be used for postponing / snoozing tasks. Any tasks that don’t have inherent due dates must stay dateless — but I need the ability to snooze them.
          li
            span.article-bold Mobile first.
            | My todo list must always be with me, at all times. All functions and features are originally designed for mobile, then ported to web and desktop.
          li
            span.article-bold Don’t chase team management.
            | Make an app for one. I honestly don't understand why people use todo apps to manage teams when Trello and Asana exist. So, nail personal use first. Make an ideal personal to-do app, and consider any collaboration features only after that — and make sure they don't compromise personal use.
          li
            span.article-bold Nail the principles first, polish later.
            | The app may be rough around the edges, and it may miss convenience features,, but it absolutely must get the core principles right.
        p Now, how do I turn all that into a working product?
        br
        h2 300 Pages of Specs
        p
          span.article-italic "Weeks of programming can save you hours of planning".
          br
          br
          | Joel Spolsky, a co-founder of Stack Overflow and Trello, is a <a href='https://www.joelonsoftware.com/2000/10/02/painless-functional-specifications-part-1-why-bother/'>big fan</a> |  of specifications. He thinks that <span class="article-italic">failing to write a spec is the single biggest unnecessary risk you take in a software project. It’s as stupid as setting off to cross the Mojave desert with just the clothes on your back, hoping to “wing it.”</span>
          br
          br
          | I completely agree with these, so before we started any coding, I wrote a specification — 300 pages of it. As of this writing, the main spec is 269 pages, the spec on account and paid plan is 38 pages, and the spec on drag-and-drop and task hierarchies is 28 pages. 335 pages in total.
          br
          br
          | I know, this is an agile era, move fast and break things, and nobody needs no stinking specs. However, there was simply no way for me to account for all the interplay between the major systems of Matterlist — Subtasks, Contexts, Hide-Until and Recurring Tasks — via iterative development. I had to think all this through in advance.
          br
          br
          | So far my experience with this approach has been very positive — 10/10, definitely would write again. The spec is my spokesperson: when the developers want to clarify something, the spec answers the vast majority of questions instead of me.
          br
          br
          img(src='/images/spec-picture.jpg' width='100%')
          br
          br
          | However, as things proceeded according to the plan, a doubt remained. What if the approach I chosen for Matterlist is wrong?
        h2 Trial by Fire
        p
          | That February monday was one hell of a day. After many months of work, the developers finally sent me the first fully-functional build of Matterlist. I just received two important drafts for review from the lawyers. But worst of all, my father was being urgently transported to the hospital with a crisis due to his late-stage cancer.
          br
          br
          | I suddenly had to deal with a massive, rapidly expanding and constantly shifting task list of critical, life-or-death importance, amidst the noise of distractions. And I knew that I won’t be able to handle that in Wunderlist, my daily driver back then. I decided to switch to Matterlist. It was built to handle days like this.
          br
          br
          | And it worked. I was blazing through the day like a machine, unfazed by the stress and distractions. Go get the nurse for the blood infusion, check. Get the list of supplies from the doctor — damn, she’s on a break — hide-until, 1 hour — is she back? — check. Go to the pharmacy, buy bandages, saline, napkins, check-check-check. Review the drafts from the lawyers — hide-until, 3 days. Tell the lawyers I won’t be reviewing the drafts today, check. Crash. Restart. Tell the devs that the app crashes but I need it right now so fix ASAP, check.
          br
          br
          | The situation with the father stabilized. As I was sitting by the hospital bed, watching him sleep while the blood slowly trickled into his bloodstream, my mind slowly regained the ability to think about other things. And it became clear that the app I spent years developing upon a not yet validated concept just saved my sanity during an extremely stressful day.
          br
          br
          | I switched from Wunderlist that very day, and never looked back.
        h2 The Remaining Question
        p
          | Since that day, I was using Matterlist as my primary todo list app. Despite all the glitches and shortcomings of a beta version, it works amazingly, ridiculously well — all decisions and approaches we implemented in Matterlist have paid off in spades.
          br
          br
          | But maybe it’s just me? Will it work the same way for other people?
          br
          br
          | The only way to find out is to release the app to the wider world. Which is exactly what we are doing right now. We had to supercharge our efforts when we learned.that Microsoft is shutting Wunderlist down -- we can’t waste this opportunity. We will know the answer soon.
          br
          br
          | And in any case, no matter what the answer will be, I’m here for the long run.
        h2 The Long Run
        p
          | Building a todo list app as a money-making business is a dumb idea. There are hundreds, if not thousands of todo apps already. Among them, there are established players like Todoist which are very hard to compete with -- just notice how many platforms they support, how many features they accumulated over the years, how positive their general press coverage is.
          br
          br
          | The good thing is, I’m not doing it for the money (though I would definitely appreciate it). As long as the company stays in the black and is able to sustain future development, I’ll be happy — and until that happens, I’m ready to fund it from my own pocket.
          br
          br
          | I'm not afraid of long timelines. If Filter Forge taught me anything, it's that good software is very long-lived — as of this writing, Filter Forge is on the market for over 10 years already! Similarly, I view Matterlist as a long-term, maybe even a lifelong project. My life would crumble without a proper todo app, so I’m prepared for the long run.

    .article-hr
    include partials/try
    include partials/footer
